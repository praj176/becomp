# -*- coding: utf-8 -*-
"""DL 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KR65zJiJsITrqDaXVqvJkr33L7tu08Jh
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split

# Load the Boston House price prediction dataset
df = pd.read_csv('Boston.csv')

df.head()

#Preprocess the dataset

from sklearn.preprocessing import StandardScaler

X= df.drop('medv',axis = 1)
y = df['medv']

print(X[:5])

#Split the dataset
 
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3, random_state = 42)
print('training set shape:',X_train.shape,y_train.shape)
print('testing set shape:',X_test.shape,y_test.shape)

from keras.models import Sequential
from keras.layers import Dense, Dropout

model = Sequential()
model.add(Dense(64, input_dim=14, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))

print(model.summary())

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

from keras.callbacks import EarlyStopping

early_stopping = EarlyStopping(monitor='val_loss', patience=5)

history = model.fit(X_train, y_train, validation_split=0.2, epochs=100, batch_size=32,callbacks=[early_stopping])

import matplotlib.pyplot as plt 
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss']) 
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss') 
plt.legend(['Training','Validation']) 
plt.show()

loss, mae = model.evaluate(X_test, y_test)
print('Mean Absolute Error:', mae)