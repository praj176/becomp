#include <iostream>
#include <vector>

// CUDA kernel for vector addition
__global__ void vectorAddition(float* a, float* b, float* c, int size) {
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    if (index < size) {
        c[index] = a[index] + b[index];
    }
}

int main() {
    int size;
    std::cout << "Enter the size of the vectors: ";
    std::cin >> size;

    // Allocate memory for vectors on the host (CPU)
    std::vector<float> h_a(size);
    std::vector<float> h_b(size);
    std::vector<float> h_c(size);

    // Initialize the vectors with random values
    for (int i = 0; i < size; i++) {
        h_a[i] = static_cast<float>(rand()) / RAND_MAX;
        h_b[i] = static_cast<float>(rand()) / RAND_MAX;
    }

    // Allocate memory for vectors on the device (GPU)
    float* d_a;
    float* d_b;
    float* d_c;
    cudaMalloc(&d_a, size * sizeof(float));
    cudaMalloc(&d_b, size * sizeof(float));
    cudaMalloc(&d_c, size * sizeof(float));

    // Copy vectors from host to device
    cudaMemcpy(d_a, h_a.data(), size * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b.data(), size * sizeof(float), cudaMemcpyHostToDevice);

    // Define the number of threads per block and blocks per grid
    int threadsPerBlock = 256;
    int blocksPerGrid = (size + threadsPerBlock - 1) / threadsPerBlock;

    // Launch the CUDA kernel for vector addition
    vectorAddition<<<blocksPerGrid, threadsPerBlock>>>(d_a, d_b, d_c, size);

    // Copy the result vector from device to host
    cudaMemcpy(h_c.data(), d_c, size * sizeof(float), cudaMemcpyDeviceToHost);

    // Print the result vector
    std::cout << "Result Vector:\n";
    for (int i = 0; i < size; i++) {
        std::cout << h_c[i] << " ";
    }
    std::cout << std::endl;

    // Free memory on the device
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    return 0;
}
